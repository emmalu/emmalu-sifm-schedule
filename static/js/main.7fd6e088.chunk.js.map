{"version":3,"sources":["components/ScheduleData.js","App.js","serviceWorker.js","index.js"],"names":["GSheetReader","require","DataController","props","state","data","dateFields","formattedDates","firstWeekDate","this","length","parseData","sheetId","sheetNumber","returnAllResults","results","dates","Object","keys","filter","header","indexOf","map","date","replace","toUpperCase","setState","renderVendors","array","parts","result","i","push","splice","Math","ceil","weekNum","col","allData","week","weekField","vendorsThisWeek","item","finalVendors","chunk","List","className","ListItem","key","vendor","theWeek","renderWeek","Grid","container","direction","justify","alignItems","spacing","xs","sm","Component","useStyles","makeStyles","legend","flexGrow","padding","legendText","textAlign","App","classes","TabPanel","children","value","index","other","role","hidden","id","aria-labelledby","Box","p","Typography","tabProperties","React","useState","setValue","class","AppBar","position","Tabs","onChange","event","newValue","aria-label","centered","Tab","label","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7fd6e088.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nconst GSheetReader = require('g-sheets-api');\n\nclass DataController extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: [],\n            dateFields: [],\n            formattedDates: [],\n            firstWeekDate: \"\"\n        };\n\n        //this.renderVendors = this.renderVendors.bind(this);\n    }\n\n    componentDidMount() {\n        if(this.state.data.length === 0){\n            this.parseData();\n        }\n    }\n    \n    parseData() {\n        const options = {\n            sheetId: '1KR5yaOVVRrO2k6qgDqjXXhN1k_85LIUSpRfjFFQ7BP8',\n            sheetNumber: 1,\n            returnAllResults: true\n        }\n        GSheetReader(options, results => {\n            let headers = Object.keys(results[0]);\n            let dates = headers.filter(function(header){\n                return header.indexOf('vendor') === -1;\n            });\n            let formattedDates = dates.map(function(date){\n                return date.replace(\"-\",\" \").toUpperCase();\n            });\n            this.setState({\n                data: results,\n                dateFields: dates,\n                formattedDates: formattedDates,\n                firstWeekDate: dates[0]\n            });\n            this.renderVendors(1, 0);\n        });\n    }\n\n    chunk(array, parts) {\n        let result = [];\n        for (let i = parts; i > 0; i--) {\n            result.push(array.splice(0, Math.ceil(array.length / i)));\n        }\n        return result;\n    }\n\n    renderVendors(weekNum, col){\n        if(this.state.data.length > 0){\n            let allData = this.state.data;\n            let week = weekNum - 1;\n            let weekField = this.state.dateFields[week];\n            let vendorsThisWeek = allData.filter(function(item) {\n                return item[weekField] === 'TRUE';\n            });\n            let finalVendors = this.chunk(vendorsThisWeek, 3);\n            return (\n                <List className=\"VendorList\">\n                    {finalVendors[col].map(item => (\n                        <ListItem key={item.vendor} className={item[\"vendor type\"]}>{item.vendor}</ListItem>\n                    ))}\n                </List>\n            );\n        }\n    }\n    renderWeek(weekNum){\n        let week = weekNum - 1;\n        if(this.state.dateFields){\n            let weekField = this.state.formattedDates[week];\n            const finalDate = weekField;\n            return (\n                finalDate  \n            );\n        }\n    }\n\n    render() {\n        const theWeek = this.props;\n        return (\n            <div>\n                <div>{this.renderWeek(theWeek.week)}</div>\n                <Grid\n                    container\n                    direction=\"row\"\n                    justify=\"space-around\"\n                    alignItems=\"top\"\n                    spacing={2}\n                >\n                    <Grid item xs={12} sm={4}>\n                        {this.renderVendors(theWeek.week, 0)}\n                    </Grid>\n                    <Grid item xs={12} sm={4}>\n                        {this.renderVendors(theWeek.week, 1)}\n                    </Grid>\n                    <Grid item xs={12} sm={4}>\n                        {this.renderVendors(theWeek.week, 2)}\n                    </Grid>\n                </Grid>\n            </div>\n        );\n    }\n}\n\nexport default DataController;","import React from 'react';\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport Tab from '@material-ui/core/Tab';\nimport Tabs from '@material-ui/core/Tabs';\nimport Typography from '@material-ui/core/Typography';\n//import moment from 'moment';\nimport DataController from './components/ScheduleData';\n\nconst useStyles = makeStyles({\n  legend: {\n    flexGrow: 1,\n    padding: 10,\n  },\n  legendText: {\n    padding: 5,\n    textAlign: \"center\",\n  }\n});\n\nfunction App() {\n  const classes = useStyles();\n\n  function TabPanel(props) {\n    const { children, value, index, ...other } = props;\n  \n    return (\n      <div\n        role=\"tabpanel\"\n        hidden={value !== index}\n        id={`simple-tabpanel-${index}`}\n        aria-labelledby={`simple-tab-${index}`}\n        {...other}\n      >\n        {value === index && (\n          <Box p={3}>\n            <Typography>{children}</Typography>\n          </Box>\n        )}\n      </div>\n    );\n  }\n  \n  TabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n  };\n\n  function tabProperties(index) {\n    return {\n      id: `simple-tab-${index}`,\n      'aria-controls': `simple-tabpanel-${index}`,\n    };\n  }\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>\n          Vendor Schedule\n        </h2>\n        <div className={classes.legend}>\n          <Grid container\n            direction=\"row\"\n            justify=\"space-around\"\n            alignItems=\"baseline\"\n          >\n            <Grid container spacing={1}>\n              <Grid item class='Baker' xs={6} sm={4}><Typography className={classes.legendText}>Baker</Typography></Grid>\n              <Grid item class='Farmer' xs={6} sm={4}><Typography className={classes.legendText}>Farmer</Typography></Grid>\n              <Grid item class='Foods' xs={6} sm={4}><Typography className={classes.legendText}>Foods</Typography></Grid>\n              <Grid item class='Maker' xs={6} sm={4}><Typography className={classes.legendText}>Maker</Typography></Grid>\n              <Grid item class='Pets' xs={6} sm={4}><Typography className={classes.legendText}>Pets</Typography></Grid>\n              <Grid item class='Spa' xs={6} sm={4}><Typography className={classes.legendText}>Spa</Typography></Grid>\n            </Grid>\n          </Grid>\n        </div>\n        <AppBar position=\"static\" className=\"Tab-Bar\">\n          <Tabs value={value} onChange={handleChange} aria-label=\"Schedule Navigation\" centered >\n            <Tab label=\"This Week \" {...tabProperties(0)} />\n            <Tab label=\"Next Week\" {...tabProperties(1)} />\n            <Tab label=\"The Week After\" {...tabProperties(2)} />\n          </Tabs>\n        </AppBar>\n        <TabPanel value={value} index={0}>\n          <DataController week={1}/>\n        </TabPanel>\n        <TabPanel value={value} index={1}>\n          <DataController week={2}/>\n        </TabPanel>\n        <TabPanel value={value} index={2}>\n          <DataController week={3}/>\n        </TabPanel>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}