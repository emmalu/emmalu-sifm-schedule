{"version":3,"sources":["components/ScheduleData.js","App.js","serviceWorker.js","index.js"],"names":["DataController","props","state","week","data","dataFields","firstWeekDate","getData","bind","this","getCsvData","fetch","response","reader","body","getReader","decoder","TextDecoder","read","result","decode","value","vendorData","filter","item","Vendor","fields","meta","replace","setState","fetchCsv","csvData","console","log","Papa","parse","header","complete","array","parts","i","push","splice","Math","ceil","length","weekNum","col","allData","weekField","vendorsThisWeek","finalVendors","chunk","List","className","map","ListItem","key","theWeek","renderWeek","Grid","container","direction","justify","alignItems","spacing","xs","sm","renderVendors","Component","App","TabPanel","children","index","other","role","hidden","id","aria-labelledby","Box","p","Typography","tabProperties","React","useState","setValue","AppBar","position","Tabs","onChange","event","newValue","aria-label","centered","Tab","label","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.af9652e3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Papa from 'papaparse';\nimport Grid from '@material-ui/core/Grid';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\n\nclass DataController extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            week: \"\",\n            data: [],\n            dataFields: [],\n            firstWeekDate: \"\"\n        };\n\n        this.getData = this.getData.bind(this);\n    }\n\n    componentDidMount() {\n        this.getCsvData();\n    }\n\n    async fetchCsv() {\n        const response = await fetch('data/Schedule.csv');\n        let reader = response.body.getReader();\n        let decoder = new TextDecoder('utf-8');\n        const result = await reader.read();\n        return decoder.decode(result.value);\n    }\n\n    getData(result) {\n        const vendorData = result.data.filter(function(item){\n            return item.Vendor !== \"\";\n        });\n        const fields = result.meta.fields;\n        const firstWeekDate = result.meta.fields[2].replace(\"-\", \" \");\n        this.setState({ data: vendorData, dataFields: fields, firstWeekDate: firstWeekDate });\n    }\n\n    async getCsvData() {\n        let csvData = await this.fetchCsv();\n        console.log(csvData);\n        Papa.parse(csvData, {\n            header: true,\n            complete: this.getData\n        });\n    }\n\n    chunk(array, parts) {\n        let result = [];\n        for (let i = parts; i > 0; i--) {\n            result.push(array.splice(0, Math.ceil(array.length / i)));\n        }\n        return result;\n    }\n\n    renderVendors(weekNum, col){\n        let allData = this.state.data;\n        let week = 1 + weekNum;\n        let weekField = this.state.dataFields[week];\n        let vendorsThisWeek = allData.filter(item =>{\n            return item[weekField] === 'TRUE';\n        });\n        let finalVendors = this.chunk(vendorsThisWeek, 3);\n        return (\n            <List className=\"VendorList\">\n                {finalVendors[col].map(item => (\n                    <ListItem key={item.Vendor} className={item[\"Vendor Type\"]}>{item.Vendor}</ListItem>\n                ))}\n            </List>\n        );\n    }\n    renderWeek(weekNum){\n        let week = 1 + weekNum;\n        let weekField = this.state.dataFields[week];\n        return (\n            <h3>{weekField}</h3>     \n        );\n    }\n\n    render() {\n        const theWeek = this.props;\n        return (\n            <div className=\"data-controller\">\n                <h3>{this.renderWeek(theWeek.week)}</h3>\n                <Grid\n                    container\n                    direction=\"row\"\n                    justify=\"space-around\"\n                    alignItems=\"top\"\n                    spacing={2}\n                >\n                    <Grid item xs={12} sm={4}>\n                        {this.renderVendors(theWeek.week, 0)}\n                    </Grid>\n                    <Grid item xs={12} sm={4}>\n                        {this.renderVendors(theWeek.week, 1)}\n                    </Grid>\n                    <Grid item xs={12} sm={4}>\n                        {this.renderVendors(theWeek.week, 2)}\n                    </Grid>\n                </Grid>\n            </div>\n        );\n    }\n}\n\nexport default DataController;","import React from 'react';\nimport './App.css';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport Box from '@material-ui/core/Box';\nimport Tab from '@material-ui/core/Tab';\nimport Tabs from '@material-ui/core/Tabs';\nimport Typography from '@material-ui/core/Typography';\n//import moment from 'moment';\nimport DataController from './components/ScheduleData';\n\n\nfunction App() {\n  function TabPanel(props) {\n    const { children, value, index, ...other } = props;\n  \n    return (\n      <div\n        role=\"tabpanel\"\n        hidden={value !== index}\n        id={`simple-tabpanel-${index}`}\n        aria-labelledby={`simple-tab-${index}`}\n        {...other}\n      >\n        {value === index && (\n          <Box p={3}>\n            <Typography>{children}</Typography>\n          </Box>\n        )}\n      </div>\n    );\n  }\n  \n  TabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n  };\n\n  function tabProperties(index) {\n    return {\n      id: `simple-tab-${index}`,\n      'aria-controls': `simple-tabpanel-${index}`,\n    };\n  }\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>\n          Vendor Schedule\n        </h2>\n        <AppBar position=\"static\" className=\"Tab-Bar\">\n          <Tabs value={value} onChange={handleChange} aria-label=\"Schedule Navigation\" centered >\n            <Tab label=\"This Week \" {...tabProperties(0)} />\n            <Tab label=\"Next Week\" {...tabProperties(1)} />\n            <Tab label=\"The Week After\" {...tabProperties(2)} />\n          </Tabs>\n        </AppBar>\n        <TabPanel value={value} index={0}>\n          <DataController week={1}/>\n        </TabPanel>\n        <TabPanel value={value} index={1}>\n          <DataController week={2}/>\n        </TabPanel>\n        <TabPanel value={value} index={2}>\n          <DataController week={3}/>\n        </TabPanel>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}